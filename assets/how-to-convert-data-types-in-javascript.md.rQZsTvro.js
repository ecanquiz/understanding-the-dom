import{_ as s,c as a,o as i,V as e}from"./chunks/framework.C80zbCY-.js";const g=JSON.parse('{"title":"Cómo Convertir Tipos de Datos en JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"how-to-convert-data-types-in-javascript.md","filePath":"how-to-convert-data-types-in-javascript.md"}'),t={name:"how-to-convert-data-types-in-javascript.md"},n=e(`<h1 id="como-convertir-tipos-de-datos-en-javascript" tabindex="-1">Cómo Convertir Tipos de Datos en JavaScript <a class="header-anchor" href="#como-convertir-tipos-de-datos-en-javascript" aria-label="Permalink to &quot;Cómo Convertir Tipos de Datos en JavaScript&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>La fuente original (en ingles) de este tutorial se encuentra <a href="https://www.digitalocean.com/community/tutorials/how-to-convert-data-types-in-javascript" target="_blank" rel="noreferrer">aquí</a></p></div><h2 id="introduccion" tabindex="-1">Introducción <a class="header-anchor" href="#introduccion" aria-label="Permalink to &quot;Introducción&quot;">​</a></h2><p>En JavaScript, <a href="./understanding-data-types.html">los tipos de datos</a> se utilizan para clasificar un tipo particular de datos, determinando los valores que puede asignar al tipo y las operaciones que puede realizar con él.</p><p>Aunque debido a la <a href="./how-to-convert-data-types-in-javascript.html#conversion-implicita">coerción de tipos</a>, JavaScript convertirá automáticamente muchos valores, a menudo es una buena práctica convertir valores manualmente entre tipos para lograr los resultados esperados.</p><p>Este tutorial lo guiará a través de la conversión de los tipos de datos primitivos de JavaScript, incluidos números, cadenas y Booleanos.</p><h2 id="conversion-implicita" tabindex="-1">Conversión Implícita <a class="header-anchor" href="#conversion-implicita" aria-label="Permalink to &quot;Conversión Implícita&quot;">​</a></h2><p>Como lenguaje de programación, JavaScript es muy tolerante con valores inesperados. Debido a esto, JavaScript intentará convertir valores inesperados en lugar de rechazarlos por completo. Esta conversión implícita se conoce como coerción de tipo.</p><p>Algunos métodos convertirán valores automáticamente para poder utilizarlos. El <a href="https://www.w3schools.com/jsref/met_win_alert.asp" target="_blank" rel="noreferrer">método <code>alert()</code></a> toma una cadena como parámetro, pero convertirá automáticamente otros tipos en cadenas. Entonces, podemos pasar un valor numérico al método:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Si ejecutamos la línea anterior, el navegador devolverá un cuadro de diálogo de alerta emergente que muestra el valor <code>8.5</code>, excepto que se habrá convertido en una cadena para poder hacerlo.</p><p>Al utilizar cadenas que se pueden evaluar en números con <a href="./how-to-do-math-in-javascript-with-operators.html">operadores matemáticos</a>, encontrará que JavaScript puede manejar los valores convirtiendo implícitamente las cadenas en números, como se muestra en los ejemplos siguientes.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Subtraction</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;15&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">5</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Modulo</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;15&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">5</span></span></code></pre></div><p>Sin embargo, no todos los operadores funcionarán como se esperaba. El operador <code>+</code> es particularmente problemático ya que puede significar suma o <a href="./how-to-work-with-strings-in-javascript.html#concatenacion-de-cadenas">concatenación de cadenas</a>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// When working with strings, + stands for concatenation</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;23&quot;</span></span></code></pre></div><p>Dado que el operador <code>+</code> es multiuso, los valores de cadena de <code>2</code> y <code>3</code>, a pesar de ser cadenas numéricas, se concatenan con el valor de cadena de <code>23</code> en lugar de sumarlos para obtener el número <code>5</code>.</p><p>Debido a que puede existir ambigüedad y, a veces, provocar resultados inesperados, suele ser mejor convertir explícitamente los tipos de datos en el código tanto como sea posible. Esto ayudará a gestionar las aportaciones de los usuarios y a gestionar los errores.</p><h2 id="convertir-valores-en-cadenas" tabindex="-1">Convertir Valores en Cadenas <a class="header-anchor" href="#convertir-valores-en-cadenas" aria-label="Permalink to &quot;Convertir Valores en Cadenas&quot;">​</a></h2><p>Los valores se pueden convertir explícitamente en cadenas llamando a <code>String()</code> o <code>n.toString()</code>.</p><p>Con la función <code>String()</code>, convertimos un <a href="./understanding-data-types.html#booleans">valor Booleano</a> en una cadena pasando el valor <code>true</code> a los parámetros de <code>String()</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Cuando hagamos esto, se devolverá la cadena literal <code>&quot;true&quot;</code>.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;true&quot;</span></span></code></pre></div><p>Alternativamente, podemos pasar un número a la función.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">49</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Se devolverá una cadena literal de ese número.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;49&quot;</span></span></code></pre></div><p>Usemos la función <code>String()</code> con una variable. Asignaremos un valor numérico a la variable <code>odyssey</code> y luego usaremos el operador <code>typeof</code> para verificar el tipo.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> odyssey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> odyssey);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">number</span></span></code></pre></div><p>En este punto, a la variable <code>odyssey</code> se le asigna el valor numérico de <code>2001</code>, que hemos confirmado que es un número.</p><p>Ahora, reasignemos <code>odyssey</code> a su equivalente de cadena y luego usemos <code>typeof</code> para confirmar que hemos convertido exitosamente el valor de la variable de un número a una cadena.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">odyssey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(odyssey);	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;2001&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> odyssey);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span></span></code></pre></div><p>En el ejemplo anterior, hemos confirmado que <code>odyssey</code> fue reasignado para que sea equivalente a un valor de cadena después de la conversión del tipo de datos.</p><p>Podemos usar <code>n.toString()</code> de forma similar. Podemos reemplazar <code>n</code> con una variable:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">blows.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>La variable <code>blows</code> se devolverá como una cadena.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;400&quot;</span></span></code></pre></div><p>Alternativamente, podemos poner un valor entre paréntesis en lugar de una variable con <code>n.toString()</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1776</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();			</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns &quot;1776&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();			</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns &quot;false&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns &quot;300&quot;</span></span></code></pre></div><p>Al usar <code>String()</code> o <code>n.toString()</code> podemos convertir explícitamente valores de Booleanos o <a href="./understanding-data-types.html#numbers">tipos de datos numéricos</a> en valores de cadena para garantizar que nuestro código se comporte como anticipamos.</p><h2 id="convertir-valores-a-numeros" tabindex="-1">Convertir Valores a Números <a class="header-anchor" href="#convertir-valores-a-numeros" aria-label="Permalink to &quot;Convertir Valores a Números&quot;">​</a></h2><p>Al convertir valores a un tipo de datos numérico, usaremos el método <code>Number()</code>. Principalmente, convertiremos cadenas de texto numérico en números, pero también podemos convertir valores Booleanos.</p><p>Podemos pasar una cadena de un número al método <code>Number()</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1984&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>La cadena se convertirá en un número y ya no estará entre comillas.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1984</span></span></code></pre></div><p>También podemos asignar una cadena a una variable y luego convertirla.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dalmatians </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;101&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dalmatians);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">101</span></span></code></pre></div><p>La cadena literal <code>&quot;101&quot;</code> se convirtió al número <code>101</code> mediante su variable.</p><p>Las cadenas de espacios en blanco o cadenas vacías se convertirán a <code>0</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns 0</span></span></code></pre></div><p>Tenga en cuenta que las cadenas que no son números se convertirán a <code>NaN</code>, que significa <strong>N</strong>ot <strong>a</strong> <strong>N</strong>umber. Esto incluye números separados por espacios.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;twelve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns NaN</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;20,000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns NaN</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2 3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns NaN</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;11-11-11&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns NaN</span></span></code></pre></div><p>Para tipos de datos Booleanos, <code>false</code> se evaluará como <code>0</code> y <code>true</code> se evaluará como <code>1</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns 1</span></span></code></pre></div><p>El método <code>Number()</code> convierte tipos de datos no numéricos en números.</p><h2 id="convertir-valores-a-booleanos" tabindex="-1">Convertir Valores a Booleanos <a class="header-anchor" href="#convertir-valores-a-booleanos" aria-label="Permalink to &quot;Convertir Valores a Booleanos&quot;">​</a></h2><p>Para convertir números o cadenas a valores Booleanos, se utiliza el método <code>Boolean()</code>. Esto puede resultar útil para determinar si un usuario ingresó datos en un campo de texto o no, por ejemplo.</p><p>Cualquier valor que se interprete como vacío, como el número <code>0</code>, una cadena vacía o valores indefinidos, <code>NaN</code> o <code>null</code>, se convierten en <code>false</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);			</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns false</span></span></code></pre></div><p>Otros valores se convertirán a <code>true</code>, incluidos los literales de cadena compuestos por espacios en blanco.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Maniacs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns true</span></span></code></pre></div><p>Tenga en cuenta que <code>&quot;0&quot;</code> como literal de cadena se convertirá en <code>true</code> ya que es un valor de cadena no vacío:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns true</span></span></code></pre></div><p>La conversión de números y cadenas a valores Booleanos puede permitirnos evaluar datos dentro de términos binarios y puede aprovecharse para controlar el flujo en nuestros programas.</p><h2 id="conclusion" tabindex="-1">Conclusión <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusión&quot;">​</a></h2><p>Este tutorial cubrió cómo JavaScript maneja la conversión de sus tipos de datos primitivos. Aunque debido a la coerción de tipos, los tipos de datos se convertirán implícitamente en muchos casos, es un buen hábito convertir tipos de datos explícitamente para garantizar que los programas funcionen como se espera.</p><p>Para obtener más información sobre los tipos de datos de JavaScript, lea &quot;<a href="./understanding-data-types.html">Comprender Tipos de Datos en JavaScript</a>&quot;.</p>`,75),o=[n];function l(p,h,r,d,k,c){return i(),a("div",null,o)}const E=s(t,[["render",l]]);export{g as __pageData,E as default};
