import{_ as s,c as a,o as i,V as e}from"./chunks/framework.C80zbCY-.js";const u=JSON.parse('{"title":"Cómo Indexar, Dividir y Manipular Cadenas en JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"how-to-index-split-and-manipulate-strings-in-javascript.md","filePath":"how-to-index-split-and-manipulate-strings-in-javascript.md"}'),n={name:"how-to-index-split-and-manipulate-strings-in-javascript.md"},t=e(`<h1 id="como-indexar-dividir-y-manipular-cadenas-en-javascript" tabindex="-1">Cómo Indexar, Dividir y Manipular Cadenas en JavaScript <a class="header-anchor" href="#como-indexar-dividir-y-manipular-cadenas-en-javascript" aria-label="Permalink to &quot;Cómo Indexar, Dividir y Manipular Cadenas en JavaScript&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>La fuente original (en ingles) de este tutorial se encuentra <a href="https://www.digitalocean.com/community/tutorials/how-to-index-split-and-manipulate-strings-in-javascript" target="_blank" rel="noreferrer">aquí</a></p></div><h2 id="introduccion" tabindex="-1">Introducción <a class="header-anchor" href="#introduccion" aria-label="Permalink to &quot;Introducción&quot;">​</a></h2><p>Una <strong>cadena</strong> es una secuencia de uno o más caracteres que pueden consistir en letras, números o símbolos. Se puede acceder a cada carácter de una cadena de JavaScript mediante un número de índice, y todas las cadenas tienen métodos y propiedades disponibles.</p><p>En este tutorial, aprenderemos la diferencia entre las primitivas de cadena y el objeto <code>String</code>, cómo se indexan las cadenas, cómo acceder a los caracteres de una cadena y las propiedades y métodos comunes utilizados en las cadenas.</p><h2 id="primitivas-de-cadena-y-objetos-de-cadena" tabindex="-1">Primitivas de Cadena y Objetos de Cadena <a class="header-anchor" href="#primitivas-de-cadena-y-objetos-de-cadena" aria-label="Permalink to &quot;Primitivas de Cadena y Objetos de Cadena&quot;">​</a></h2><p>Primero, aclararemos los dos tipos de cadenas. JavaScript diferencia entre la <strong>cadena primitiva</strong>, un tipo de datos inmutable y el objeto <code>String</code>.</p><p>Para probar la diferencia entre las dos, inicializaremos una cadena primitiva y un objeto de cadena.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Initializing a new string primitive</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stringPrimitive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;A new string.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Initializing a new String object</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stringObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A new string.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Podemos usar el operador <code>typeof</code> para determinar el tipo de un valor. En el primer ejemplo, simplemente asignamos una cadena a una variable.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stringPrimitive;</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span></span></code></pre></div><p>En el segundo ejemplo, usamos <code>new String()</code> para crear un objeto de cadena y asignarlo a una variable.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stringObject;</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">object</span></span></code></pre></div><p>La mayor parte del tiempo creará primitivas de cadena. JavaScript puede acceder y utilizar las propiedades y métodos integrados del contenedor de objetos <code>String</code> sin cambiar realmente la cadena primitiva que ha creado en un objeto.</p><p>Si bien este concepto resulta un poco desafiante al principio, debes tener en cuenta la distinción entre primitivo y objeto. Esencialmente, hay métodos y propiedades disponibles para todas las cadenas y, en segundo plano, JavaScript realizará una conversión a objeto y volverá a primitivo cada vez que se llame a un método o propiedad.</p><h2 id="como-se-indexan-las-cadenas" tabindex="-1">Cómo se Indexan las Cadenas <a class="header-anchor" href="#como-se-indexan-las-cadenas" aria-label="Permalink to &quot;Cómo se Indexan las Cadenas&quot;">​</a></h2><p>Cada uno de los caracteres de una cadena corresponde a un número de índice, comenzando por <code>0</code>.</p><p>Para demostrarlo, crearemos una cadena con el valor <code>How are you?</code>.</p><div class="table-wrapper"><table><thead><tr><th style="text-align:center;">H</th><th style="text-align:center;">o</th><th style="text-align:center;">w</th><th style="text-align:center;"></th><th style="text-align:center;">a</th><th style="text-align:center;">r</th><th style="text-align:center;">e</th><th style="text-align:center;"></th><th style="text-align:center;">y</th><th style="text-align:center;">o</th><th style="text-align:center;">u</th><th style="text-align:center;">?</th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">5</td><td style="text-align:center;">6</td><td style="text-align:center;">7</td><td style="text-align:center;">8</td><td style="text-align:center;">9</td><td style="text-align:center;">10</td><td style="text-align:center;">11</td></tr></tbody></table></div><p>El primer carácter de la cadena es <code>H</code>, que corresponde al índice <code>0</code>. El último carácter es <code>?</code>, que corresponde a <code>11</code>. Los espacios en blanco también tienen un índice, en <code>3</code> y <code>7</code>.</p><p>Ser capaz de acceder a todos los caracteres de una cadena nos brinda varias formas de trabajar y manipular cadenas.</p><h2 id="accediendo-a-caracteres" tabindex="-1">Accediendo a Caracteres <a class="header-anchor" href="#accediendo-a-caracteres" aria-label="Permalink to &quot;Accediendo a Caracteres&quot;">​</a></h2><p>Vamos a demostrar cómo acceder a caracteres e índices con la cadena <code>How are you?</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;How are you?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Usando la notación entre corchetes, podemos acceder a cualquier carácter de la cadena.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;How are you?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">r</span></span></code></pre></div><p>Alternativamente, podemos usar <code>indexOf()</code> para devolver el número de índice por la primera instancia de un carácter.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;How are you?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;o&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span></code></pre></div><p>Aunque la “o” aparece dos veces en la cadena <code>How are you?</code>, <code>indexOf()</code> obtendrá la primera instancia.</p><p><code>lastIndexOf()</code> se utiliza para encontrar la última instancia.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;How are you?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lastIndexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;o&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">9</span></span></code></pre></div><p>Para ambos métodos, también puedes buscar varios caracteres en la cadena. Devolverá el número de índice del primer carácter de la instancia.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;How are you?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;are&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4</span></span></code></pre></div><p>El método <code>slice()</code>, por otro lado, devuelve los caracteres entre dos números de índice. El primer parámetro será el número de índice inicial y el segundo parámetro será el número de índice donde debe terminar.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;How are you?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">you</span></span></code></pre></div><p>Tenga en cuenta que <code>11</code> es <code>?</code>, pero <code>?</code> no es parte de la salida devuelta. <code>slice()</code> devolverá lo que está entre el último parámetro, pero sin incluirlo.</p><p>Si no se incluye un segundo parámetro, <code>slice()</code> devolverá todo, desde el parámetro hasta el final de la cadena.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;How are you?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">you?</span></span></code></pre></div><p>En resumen, <code>charAt()</code> y <code>slice()</code> ayudarán a devolver valores de cadena basados en números de índice, e <code>indexOf()</code> y <code>lastIndexOf()</code> harán lo contrario, devolviendo números de índice basados en los caracteres de cadena proporcionados.</p><h2 id="encontrar-la-longitud-de-una-cadena" tabindex="-1">Encontrar la Longitud de una Cadena <a class="header-anchor" href="#encontrar-la-longitud-de-una-cadena" aria-label="Permalink to &quot;Encontrar la Longitud de una Cadena&quot;">​</a></h2><p>Usando la propiedad <code>length</code>, podemos devolver el número de caracteres en una cadena.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;How are you?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">12</span></span></code></pre></div><p>Recuerde que la propiedad <code>length</code> devuelve el número real de caracteres que comienzan con 1, que da como resultado 12, no el número de índice final, que comienza en <code>0</code> y termina en <code>11</code>.</p><h2 id="convertir-a-mayusculas-o-minusculas" tabindex="-1">Convertir a Mayúsculas o Minúsculas <a class="header-anchor" href="#convertir-a-mayusculas-o-minusculas" aria-label="Permalink to &quot;Convertir a Mayúsculas o Minúsculas&quot;">​</a></h2><p>Los dos métodos integrados <code>toUpperCase()</code> y <code>toLowerCase()</code> son formas útiles de formatear texto y hacer comparaciones textuales en JavaScript.</p><p><code>toUpperCase()</code> convertirá todos los caracteres a caracteres en mayúsculas.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;How are you?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HOW</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ARE YOU?</span></span></code></pre></div><p><code>toLowerCase()</code> convertirá todos los caracteres a minúsculas.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;How are you?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">how</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are you?</span></span></code></pre></div><p>Estos dos métodos de formato no requieren parámetros adicionales.</p><p>Vale la pena señalar que estos métodos no cambian la cadena original.</p><h2 id="dividir-cadenas" tabindex="-1">Dividir Cadenas <a class="header-anchor" href="#dividir-cadenas" aria-label="Permalink to &quot;Dividir Cadenas&quot;">​</a></h2><p>JavaScript tiene un método muy útil para dividir una cadena por un carácter y crear una nueva <a href="./understanding-arrays-in-javascript.html">matriz</a> a partir de las secciones. Usaremos el método <code>split()</code> para separar la matriz mediante un carácter de espacio en blanco, representado por <code>&quot; &quot;</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> originalString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;How are you?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Split string by whitespace character</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> splitString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originalString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(splitString);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;How&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;are&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;you?&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span></code></pre></div><p>Ahora que tenemos una nueva matriz en la variable <code>splitString</code>, podemos acceder a cada sección con un número de índice.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">splitString[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">are</span></span></code></pre></div><p>Si se proporciona un parámetro vacío, <code>split()</code> creará una matriz separada por comas con cada carácter de la cadena.</p><p>Al dividir cadenas, puede determinar cuántas palabras hay en una oración y utilizar el método como una forma de determinar los nombres y apellidos de las personas, por ejemplo.</p><h2 id="recortar-espacios-en-blanco" tabindex="-1">Recortar Espacios en Blanco <a class="header-anchor" href="#recortar-espacios-en-blanco" aria-label="Permalink to &quot;Recortar Espacios en Blanco&quot;">​</a></h2><p>El método JavaScript <code>trim()</code> elimina los espacios en blanco de ambos extremos de una cadena, pero no de ningún punto intermedio. Los espacios en blanco pueden ser tabulaciones o espacios.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tooMuchWhitespace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;     How are you?     &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> trimmed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tooMuchWhitespace.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(trimmed);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">How</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are you?</span></span></code></pre></div><p>El método <code>trim()</code> es una forma sencilla de realizar la tarea común de eliminar el exceso de espacios en blanco.</p><h2 id="encontrar-y-reemplazar-valores-de-cadena" tabindex="-1">Encontrar y Reemplazar Valores de Cadena <a class="header-anchor" href="#encontrar-y-reemplazar-valores-de-cadena" aria-label="Permalink to &quot;Encontrar y Reemplazar Valores de Cadena&quot;">​</a></h2><p>Podemos buscar un valor en una cadena y reemplazarlo con un nuevo valor usando el método <code>replace()</code>. El primer parámetro será el valor que se encontrará y el segundo parámetro será el valor por el que se reemplazará.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> originalString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;How are you?&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Replace the first instance of &quot;How&quot; with &quot;Where&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originalString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;How&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Where&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newString);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Where</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are you?</span></span></code></pre></div><p>Además de poder reemplazar un valor con otro valor de cadena, también podemos usar <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noreferrer">Expresiones Regulares</a> para hacer que <code>replace()</code> sea más poderoso. Por ejemplo, <code>replace()</code> solo afecta el primer valor, pero podemos usar el indicador <code>g</code> (global) para capturar todas las instancias de un valor y el indicador <code>i</code> (no distingue entre mayúsculas y minúsculas) para ignorar mayúsculas y minúsculas.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> originalString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Javascript is a programming language. I&#39;m learning javascript.&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Search string for &quot;javascript&quot; and replace with &quot;JavaScript&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originalString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">javascript</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">gi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JavaScript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newString);</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JavaScript</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is a programming language. I&#39;m learning JavaScript.</span></span></code></pre></div><p>Esta es una tarea muy común que utiliza expresiones regulares. Visite <a href="https://regexr.com/" target="_blank" rel="noreferrer">Regexr</a> para practicar más ejemplos de RegEx.</p><h2 id="conclusion" tabindex="-1">Conclusión <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusión&quot;">​</a></h2><p>Las cadenas son uno de los tipos de datos más utilizados y hay muchas cosas que podemos hacer con ellas.</p><p>En este tutorial, aprendimos la diferencia entre la cadena primitiva y el objeto <code>String</code>, cómo se indexan las cadenas y cómo usar los métodos y propiedades integrados de las cadenas para acceder a caracteres, formatear texto y buscar y reemplazar valores.</p><p>Para obtener una descripción más general de las cadenas, lea el tutorial <a href="./how-to-work-with-strings-in-javascript.html">&quot;Cómo Trabajar con Cadenas en JavaScript&quot;</a>.</p>`,88),l=[t];function p(o,d,r,h,c,k){return i(),a("div",null,l)}const y=s(n,[["render",p]]);export{u as __pageData,y as default};
